Linux开源免费，本质是终端会话界面（类似对话框，直接人机交互），不同于Windows图形界面

     ctrl+alt+t   打开原始终端 ，或者vm里面左下角九宫格打开原始终端    或者右键打开当点位置终端， open in terminal终端
     绿色的是账户，蓝色的是现在的位置，后面是你要输入的东西
    应答文件 (unattend.xml) 用于在安装期间修改你的映像中的 Windows 设置，添加制造商信息、语言、键盘布局等。


Linux路径   
路径就是文件浏览的位置（现在停留在哪个文件夹上）

   /       表示根路径，例如C盘D盘这些，系统盘最初的路径，再往上没有了
  ./      表示当前位置，后面再加一个文件名表示执行某程序
  ../     表示上一级路径，就是前一个位置
 
  ~       波浪线表示用户的初始路径                                         练习1：使用cd切换到111文件夹


Linux指令     

cd路径，切换路径change document       注意每条指令后面要有空格   
    例如   cd ../切换到上一级路径          （cd后面有空格）       cd ./文件名   切换到同级的文件

ls显示文件夹内所有文件    例如打开一个空文件夹再cd ../回到根目录，再ls就可以显示

    用法一  直接输入ls     显示当前文件夹所有普通文件
    用法二  ls+空格+-a     显示所有文件包含隐藏文件   .bash就是隐藏文件，都是开头
    用法三  ls+空格+-l      所有文件的详情列表
    用法四  ls+空格+-la或la  同时进行上面这两种操作              练习2：111文件内使用ls命令查看/home路径所有隐藏文件


Linux指令   
man     
   用法一   man+空格+命令名  如man ls    查看信息
   用法二   man+空格+>+空格+文件名，把信息导出为一个文件，例如 man ls > read_ls.txt 生成一个文件

   
mkdir   创建文件夹
   用法一    直接创建文件夹 mkdir空格文件名  例如  mkdir day01   
   用法二    mkdir 空 -p 空 路径名        例如 mkdir -p 222/sa/day02 
   用法三    指定位置创建文件夹   mkdir+空+路径/文件夹


touch创建文件    常用这个
   用法一 touch+空+文件名    直接创建指定文件，任意类型的文件  例如 touch day01.txt
 
cp
用法一   复制操作        cp+空格+复制原文件+空+备份文件名   
用法二   复制某位置文件  cp+空格+路径/目标文件+空+目标路径/备份文件名
用法三   复制文件夹      cp+空格+-R+原文件名+空+备份文件名



练习3    使用man指令把cp，touch，mkdir等命令的操作导出为说明文件，且放在用户目录下的help文件夹内
需要完全使用终端，不要使用鼠标
   man cp touch mkdir > read_ctm.txt然后回车再cd help/然后回车再 cp ../1111/read_ctm.txt ./ 这个是在1111下操作的
   man cp >read_cp.txt      cp read_ctm.txt /11111 
cp ../help/read_ctm.txt ./
a练习4 把几个文件一次性拷贝到一个地方                  


Linux指令之   通配符号*
cp ../1111/read_* ./        批量拷贝
复制的特殊用法read_*   复制以read开头的所有文件，*表示省略完整名的所有文件，就是模糊匹配（统统匹配），*也可以放在前面，代表忽略前名，所有以*后具体名结尾的文件，


修改指令mv （如果有重名的会覆盖，所以比cp指令风险大）
用法一  重命名      mv+空格+目标文件夹名+空格+新的文件名     例如  mv 1111 txt   把当前文件夹中的1111改为txt
用法二  剪切/修改文件位置     mv+空+路径/文件名+空+存在的新路径          mv txt ../hi/     改为hi且为上一级 


删除指令rm
用法一   rm+空格+目标名        删除文件
用法二   rm+空格+-rf+目标名    彻底删除文件夹（有风险，慎重）       rm txt/删不了，是一个文件夹需要rm -rf txt



远程登陆指令  ssh                
用法  ssh+空格+账户名@ip地址    然后等待一会输入密码            ssh hao@hao-virtual-machine@192.168.35.128
ip addr查ip    inet后面的是ipv4地址  大部分都是以128结尾的      ssh  lht@192.168.221.128 powershell也可以登自己的虚拟机的


安装指令dpkg     （常用的指令）    已有安装包时
用法       dpkg空格-i空格+安装包，安装一个软件插件      .deb就是ubuntu的安装包后缀    code.deb
用法二     dpkg+空格+r+空格+已安装的软件名     卸载一个软件


超级管理员权限指令  sudo
用法  sudo+空格+其他       包含各种指令 
需要输入一次安装时的密码，时效十几分钟（输密码时不会显示，输完回车等待即可）   sudo apt-get install openssh-server  然后回车


下载并安装指令    apt
用法   apt+空格+install+空格+文件名（或者下载的软件名）  用于下载安装软件插件     由于权限限制，一般这个指令前面要加上sudo


练习5  使用sudo apt  下载并安装g++              sudo apt install g++
g++工具，     用于编译c++代码文件，可以把c/c++代码文件编译为执行程序或库文件
vscode 编码工具      qt跨平台的工具，可以Windows开发，Linux运行                          ./+程序名 运行程序

D:/.ssh/config      创建vscode的远程配置项.。..



编译
ls 回车  cd day01回车    g++ cman.cpp -o test     指令  源文件  输出  目标文件
g++的用法       g++ 空格 源文件全名（以.cpp结尾的文件） 空格 -o 空格 程序名          ./程序名  这里没有空格

练习6       复习所有指令用法
创建一个叫workspace名字的工程         mkdir workspace    touch day01       把w什么的复制到1111 即用 cp workspace 1111
把day01文件夹复制到这个工程里面       cp -r day01 workspace （要是文件夹形式）
    
练习7   把cd外的所有指令，用法保存为read_cp.txt文件，然后放到day01文件夹     

练习8 远程拷贝虚拟机里面的workspace文件夹，放到Windows操作系统里面      


vscode中写完程序然后保存，再ctrl+波浪线可以快速打开终端，然后输入g++ xxxx.cpp -o xxxx 回车 进行编译     最后  ./执行程序

———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

day02
  c++语言是在C语言之上的一门高级语言，用于面向对象的开发
  高级语言：
  低级语言：汇编，机械语言接近指令集的语言叫
  C语言是中级语言，在原始指令，机械语言之上提出了内存，自定义结构，，，能理解一些概念但是需要很复杂的结构
  c++ ，在C语言之上拓展，把抽象的概念描述为类，让编程尽量接近人类的方式，，，
         注意c++ 的注释格式       //表示整行注释        /**/表示一段注释          写完一段要记得CTRL+s保存


C++文件
    头文件.h或.hpp结尾     用于定义声明变量，数据类型，结构等
    源文件.cpp结尾，用于分配内存资源，实现代码功能             预编译也叫预处理，就是提前处理
 
注意：
（1）cin>>等价于cin.operator>>()，即调用成员函数operator>>()进行读取数据。
（2）当cin>>从缓冲区中读取数据时，若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin>>会将其忽略并清除，继续读取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的，cin>>不做处理。
（3）不想略过空白字符，那就使用 noskipws 流控制。比如cin>>noskipws>>input;



打开终端    然后   touch day 02  回车     touch cmain.cpp   回车      ls   回车
然后在代码栏上面写代码

#include <iostream>                            注意是这个文件名要以.cpp结尾的
  #是预编译符号，就是在编程之前设置环境     include就是导入头文件     <>表示从系统路径引下进头文件       
  ""从当前路径下引进头文件  iostream这个是C++语言自带的头文件（管理输入输出操作），i=input  o=output  stream流=一堆数据   
  分号才是一行代码的结束,还有括号要成对的写，不然最后容易遗漏


using namespace std;   
   namespace命名空间是C++里面的功能，代码，函数这些东西的封装集合
   std是C++语言标准库里面自带的命名空间，包含了C++语言自带的所有功能，只有使用c++系统方法，才能


int main();
     这是主函数来自于C语言，main函数是程序的唯一入口，主体，和实际执行单位，用于创建程序，一个程序中只有一个main函数
注意前面已经touch cmain.cpp       
int main（）{}是固定用法，但是这两个括号中可以加参数，     大括号里才是程序真正执行的东西

__________________写完代码保存然后在终端输入g++ cmain.cpp -o cmain 回车 进行编译，注意这是编译叫cmain.cpp这个文件    
__________________然后再./cmain运行这个叫cmain.cpp的           注意终端按上键可以重复上一次的代码


cout<<"1111eeee"<<endl;
     c++基础之输出cout      cout打印输出函数，把信息打印在终端
     <<是流操作，作用是把右侧的数据传递给左侧的函数，可以追加传递可以多加几个<<
     endl流操作结束符， 打印且换行

   
c++变量，记录数据或者消息的存储单位，记录的内容可变
     变量的定义，数据类型+空格+变量; 连续定义几个变量中间以，分开     例如int a,b;   a=10,b=5;
c++的输入用cin   是c++自带的输入函数，把终端的数据给到程序，
     >>这个流操作的作用是把左侧的数据给到右侧的，  也可以追加，就是把左侧的数据连续给到右侧变量的接收单位
     如果追加输入，在终端上每段输入数据要用空格或者换行符号分隔开

如果数据类型和定义的变量不匹配，接受过程会引发错误，


练习1：进行一个乘法运算，输入整数a,b 输出乘积。重新创建一个叫ctest1.cpp来实现

include <iostream>
using namespace std;
 
int main()
{
   int a = 66;
   int b = 666;
   int c;
 
   c = a + b;
   cout << "Line 1 - c 的值是 " << c << endl ;
     c = a * b;
   cout << "Line 2 - c 的值是 " << c << endl ;
   c = a / b;
   cout << "Line 3 - c 的值是 " << c << endl ;
    return 0;
}

然后ctrl加波浪线快速打开终端，输入g++ ctest1.cpp -o ctest1进行编译然后回车      再输入./ctest1运行这个文件


注意c++左侧只能作为接收方=只能从右往左赋值                                     11:32 2024/9/20 



练习2：编写ct2.cpp打印基础信息，姓名学号院校，而且然后输入一个成绩，输出得到一个绩点分数


#include <iostream>
using namespace std;
 
int main() 
{
    int socre;
    double jidian=0;
    cin>>score;
    jidian=(socre-60.0)/10;
     
    cout << "绩点"<<jidian<<endl;
    return 0;
}

不管是 cin 也好，cout 也好，<< 和 >> 一次性只能输出或者输入一个，例如以下的写法是错误的：
cout << a, b, c;
cin >> a, b, c;


cin可以连续从键盘读取想要的数据，以空格、tab或换行作为分隔符。实例程序如下：

 cin>>a>>b>>c;
 cout<<a<<" "<<b<<" "<<c<<" "<<endl;


c++基础之  逻辑运算            =是赋值  ==是逻辑运算
 
   ==判断左右两个是否相等，相等则为一，不相等则为0。
   !=判断是否不相等，不等则返回1，相等则为0.
   >左侧大于右侧则为1，否则为0
   <
   >=
   <= 左侧小于或等于右侧，则为1，不然为0
   &&与判断，必须左右两侧同时为1，则赋值1，不然为0
   ||或判断，左右两侧只要有一个为1，则赋值1，


c++基础之自增运算
     ++自增加一    --自减减一        +=左侧变量自家右侧变量     -=      a+=b,a+一个b

c++基础之判断结构      if 判断逻辑执行结构
   结构：把一堆代码包装成一个整体，满足给定条件时，包装的代码才会执行
   if判断结构：当if的判断结构成立时（判断结果为1），if结构包含的代码会执行


if结构的写法
if()        ()里面写判断逻辑运算公式
{}          {}里面写代码每一行中间分号隔开，当然，上面的运算成立时，这些代码才会执行

if关联式判断结构 if(){} 是基础条件判断结构         else if(){} 是当 if 语句的条件不满足时，继续判断其他条件、



练习3：输入整数a,b然后判断这两个的大小

if (a==b)
{  cout什么   }
if (a>b)
{    cout什么  }
if ()


练习4做一个简易计算器，要求计算
  1：输入运算选项（1+2-3/4）
  2：输入两个要进行运算的变量
  3：判断除法运算的分母不为0


循环结构
   for循环结构，条件成立时，结构内的代码会执行

练习5：输入两个整数，一个是基础数据，一个是他的幂运算次数，输出结果；（基础数据9次以下，幂运算9次以下），


for用于有次数的多少次循环
while应用于没有次数但是有条件的循环圈



c++里面所有的变量都可以叫做对象




C++ 函数
————————————————————————————————————————————————————————————
一个程序的入口只有一个就是main函数，main函数越简单越好，函数的出口是返回值

在C++中，函数是执行特定任务的一组代码。每个C++程序至少有一个函数，即主函数main()，可以根据需要定义其他函数
函数的定义
一个函数的定义包括返回类型、函数名、参数列表和函数体。基本语法如下：

return_type function_name(parameter_list) {
    // 函数体
}
以下是一个简单的函数示例，它接受两个整数参数并返回它们的和：

#include <iostream>
using namespace std;

// 函数声明
int add(int a, int b);

int main() {
    int result = add(5, 3);
    cout << "结果是: " << result << endl;
    return 0;
}

// 函数定义
int add(int a, int b) {
    return a + b;
}

函数的组成部分
返回类型：指定函数返回值的数据类型。如果函数不返回值，则使用void。
函数名：函数的标识符，用于调用函数。
参数列表：函数的输入参数，可以为空。
函数体：包含执行任务的代码。
函数声明和定义
函数声明告诉编译器函数的名称、返回类型和参数，但不包含函数体。函数定义则包含实际的代码实现。

调用函数
调用函数时，程序控制权转移到被调用的函数，执行完函数体后返回调用点。例如：
(.text+0x24): undefined reference to main'

int result = add(5, 3);

参数传递
C++支持三种参数传递方式：

传值调用：将参数的实际值传递给函数。
指针调用：将参数的地址传递给函数。
引用调用：将参数的引用传递给函数。
默认参数值
你可以为函数参数指定默认值：

int sum(int a, int b = 10) {
    return a + b;
}

调用时，如果未提供第二个参数，则使用默认值10。

Lambda表达式
C++11引入了Lambda表达式，用于定义匿名函数：

auto add =  { return x + y; };
cout << add(3, 4) << endl; // 输出7


————————————————————————————————————————————————————————————

错误一
lht@ubuntu:~/day1$ touch cc.cpp 
lht@ubuntu:~/day1$ g++ cc.cpp -o cccc /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/9/. ./../../x86_64-linux-gnu/Scrt1.o: in function _start':
Collect2: error: ld returned 1 exit status为什么会产生这个错误 

错误原因：
寻找main函undefined reference to 'main'錯      这里终端的代码是没问题的，是上面的代码的问题，代码没写好


for循环
————————————————————————————————————————————————————————————

在C++中，for循环是一种常用的控制结构，用于执行特定次数的重复操作。它的基本语法如下：for（ 初始化；条件表达式；增量）{}
for (init; condition; increment) {
    // 循环体代码
}
语法解释
init：初始化，在循环开始前执行一次。通常用于声明和初始化循环控制变量。
condition：条件表达式，每次循环开始前都会判断。如果条件为真，执行循环体；如果为假，退出循环。
increment：增量部分，每次循环结束后执行，用于更新循环控制变量。u

示例   打印从10到19的数字：

#include <iostream>
using namespace std;

int main() {
    for (int a = 10; a < 20; a++) {
        cout << "a 的值：" << a << endl;
    }
increment是什么
在C++的for循环中，increment（增量）部分用于更新循环控制变量的值。每次循环结束后，都会执行这一部分。通常，。这部分用于增加或减少循环变量的值，以便逐步逼近循环终止条件

例如，在下面的代码中：
for (int i = 0; i < 10; i++) {
    cout << i << endl;
}

初始化变量i为0。当i小于10时，循环继续。increment部分是i++，每次循环结束后，i的值增加1。
因此，increment部分确保循环变量i逐步增加，最终使得condition部分的条件不再成立，从而结束循环。


cout
————————————————————————————————————————————————————————————
cout是C++标准库中的，向输出设备（屏幕）输出数据。是iostream头文件的一部分。以下是cout的常见的操作：

基本用法
          cout << "Hello, World!" << endl;
          这个例子中，cout用于输出字符串"Hello, World!"，endl用于在输出后换行。

输出不同类型的数据
cout可以输出多种数据类型，包括整数、浮点数、字符和字符串：

int a = 10;
double b = 3.14;
char c = 'A';
string str = "Hello";

cout << "整数: " << a << endl;
cout << "浮点数: " << b << endl;
cout << "字符: " << c << endl;
cout << "字符串: " << str << endl;

格式化输出
可以使用iomanip库中的操纵算子来格式化输出，例如设置小数点精度：
#include <iomanip>
double pi = 3.141592653589793;
cout << "默认精度: " << pi << endl;
cout << "设置精度为3: " << fixed << setprecision(3) << pi << endl;




作业：练习7，打印99乘法表在终端               task7.cpp
      练习8，做一套成绩单的评价，60-69及格，70-79一般，80-89良好，90-100优秀，60以下不及格
      练习9，写一个函数，一个有参数和反馈值，传入a,b两个整数，传出他们的逆运算的结果，并且在main函数调用该函数输出运算结果
      _______________________________________________________________________________________________________________________________

9:42 2024/9/21day03——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————注 9.23休息一天

c++基础之函数参数
        
函数的参数， 函数代码中引入外部输入数据，或信息的功能
参数的特征： 参数是变量，但是参数变更量的修改只在函数内，有效果（指针变量除外）
指针变量：   一个变量包含两部分结构，第一个结构是地址，另一个结构叫数据，普通变量修改的是数据部分，指针变量修改地址

实参： 使用函数时，给函数塞进去的数据叫实参，
形参： 函数实现过程中，函数（）里面定义的变量就是形参

例如：void func(int a);函数func中，int a就是定义的形参;
形参定义了函数的参数类型，函数调用时必须传入相同类型的实参，       函数可以有任意数量和类型的参数

 c++返回值

返回值就是函数的类型，函数可以有输入输出，输入就是函数的参数部分，输出就是函数的返回值
void无返回值类型，用它定义的类型函数没有输出，
return是函数的结束符，一遇到return必须退出，void function,最后用return。。int func(),最后return0
一般情况下声明了函数类型需要加return
练习1：输入a,b两个整数，设计一个函数进行a,b的加法运算，然后对运算结果进行指数运算。也就是求a，b的和的平方


c++基础之数组，
————————————————————————————————————————————————————————————
数组，连续存储一系列相同变量，，只有指定的长度和类型
c++数组的类型和变量一样可以是任意类型                                 一维数组 声明：type arrayName[arraySize];
数组范围，数组定义时指定的，数组的序号从0开始，到定义长度-1为止，          int sum [10],定义10个数据的数组


c++数组类型和使用方法:
在 C++ 中，数组是一种非常重要的数据结构，用于存储相同类型的元素。以下是关于 C++ 数组类型和使用方法的详细介绍：

一维数组   声明：type arrayName[arraySize];
int arr[5]; // 声明一个包含 5 个整数的一维数组

初始化：
int arr[5] = {1, 2, 3, 4, 5}; // 初始化数组
int arr[] = {1, 2, 3, 4, 5};  // 自动推断数组大小

访问元素：
int firstElement = arr[0]; // 访问第一个元素
arr[1] = 10; // 修改第二个元素的值

二维数组
声明：type arrayName[rows][cols];
int matrix[3][4]; // 声明一个 3 行 4 列的二维数组

初始化：
int matrix[3][4] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12}
};

访问元素：
int element = matrix[1][2]; // 访问第二行第三列的元素
matrix[0][0] = 5; // 修改第一行第一列的元素

动态数组
使用 new 关键字：
int* dynamicArray = new int[5]; // 动态分配一个包含 5 个整数的一维数组
dynamicArray[0] = 1; // 访问和修改元素
delete[] dynamicArray; // 释放内存

二维动态数组：
int** dynamicMatrix = new int*[3];
for (int i = 0; i < 3; ++i) {
    dynamicMatrix[i] = new int[4];
}
// 访问和修改元素
dynamicMatrix[1][2] = 7;
// 释放内存
for (int i = 0; i < 3; ++i) {
    delete[] dynamicMatrix[i];
}
delete[] dynamicMatrix;

常见操作
获取数组大小：
int size = sizeof(arr) / sizeof(arr[0]); // 获取一维数组的大小

遍历数组：
for (int i = 0; i < size; ++i) {
    std::cout << arr[i] << " ";
}
——————————————————————--————
为了避免每次都写 std:: 前缀，可以使用 using 声明：——————————————————————————-————————

以下是一个简单的示例，展示了如何使用一维数组和二维数组：

#include <iostream>

int main() {
    // 一维数组
    int arr[5] = {1, 2, 3, 4, 5};
    for (int i = 0; i < 5; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    // 二维数组
    int matrix[3][4] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12}
    };
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 4; ++j) {
            std::cout << matrix[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}

练习2：给定一个10个数据的数组，找到与输入值相同的数据序号
练习3：自定义一个10个数据的数组，找到其中最大的数据序号


作业一：给一个10个数据的数组，输出每个数据，从小到大排序，在输出每一个成员


——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
c++基础之   类class

类是一种高级的代码封装方法，可以把抽象的概念归纳描述为一个个类，类是一种自定义的数据结构或类型
类的定义可以放在头文件，实现过程放在源文件 

命名式：1：文件名，以文件具备的功能和实现目标为命名，


宏，预处理阶段，环境配置时的一个标志，宏的定义一般是大写的，定义结束时要加分号

#ifndef MONEY_H            //预处理判断指令，是否不存在,如果不存在则判断成功就下一步，如果存在则直接跳转到mendif
define  MONEY_H
#endif                //预处理阶段定义指令，用于创建宏，
                       预处理阶段宏判断符号，判断结束时会执行到endif的位置



类class的定义
class+空格+类名+{}+;  在{}写成员变量，成员函数，属性

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
c++的类class是什么

在C++中，类（class）同样是面向对象编程（OOP）的核心概念，用于定义对象的属性（成员变量）和行为（成员函数）。类是创建对象的模板，具体的对象称为类的实例。类通过提供封装、继承和多态等特性，支持模块化、可扩展的程序设计。

C++ 类的基本构成
成员变量（属性）：用于存储对象的状态或数据。
成员函数（方法）：表示对象的行为或功能，通常通过访问或修改成员变量来执行操作。

C++ 类的定义
在C++中，  类中的成员通常有三种访问权限：private（私有）只能在自己的类使用、protected（受保护）和 public（公共）。

cpp
复制代码
#include <iostream>
using namespace std;

class Person {
private:
    string name;  // 私有成员变量
    int age;

public:
    // 构造函数：用于初始化对象
    Person(string n, int a) {
        name = n;
        age = a;
    }

    // 公有成员函数
    void greet() {
        cout << "Hello, my name is " << name << " and I am " << age << " years old." << endl;
    }
};

int main() {
    // 创建类的实例
    Person person1("Alice", 30);
    person1.greet();  // 调用类的方法

    return 0;
}
C++ 类的主要特性          新创建的类默认是private，但是可以手动改为public
访问权限：C++中的类成员可以指定访问权限：

private：只能被类的成员函数访问，外部无法直接访问。
protected：类似于 private，但允许派生类访问。
public：可以被外部访问。
构造函数：构造函数在创建对象时自动调用，用于初始化对象的成员变量。

析构函数：析构函数是以 ~ 开头的特殊成员函数，用于在对象生命周期结束时执行清理操作。通常用于释放资源（如内存）。


class Person {
public:
    // 析构函数
    ~Person() {
        cout << "Object destroyed" << endl;
    }
};
成员函数的定义：类的成员函数可以在类内部定义，也可以在类外部定义。类外定义时，需要使用作用域运算符 ::。


class Person {
private:
    string name;
public:
    void setName(string n);  // 在类内声明函数
};

// 在类外定义函数
void Person::setName(string n) {
    name = n;
}
面向对象的三大特性在C++中的实现
封装：通过访问控制符将类的成员变量和成员函数封装起来，控制外部访问。

继承：类可以继承另一个类的属性和方法。基类（父类）的 public 和 protected 成员可以被派生类（子类）继承。

—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
class Student : public Person {
private:
    int student_id;
public:
    Student(string n, int a, int id) : Person(n, a), student_id(id) {}

    void greet() {
        cout << "Hello, I am " << student_id << " and my name is " << name << endl;
    }
};
多态：C++通过虚函数和函数重载实现多态。虚函数允许子类重写基类的函数，并在运行时动态决定调用哪一个函数。


class Person {
public:
    virtual void greet() {
        cout << "Hello from Person" << endl;
    }
};

class Student : public Person {
public:
    void greet() override {
        cout << "Hello from Student" << endl;
    }
};

int main() {
    Person* p = new Student();
    p->greet();  // 调用 Student 的 greet
    delete p;
    return 0;
}
总结
C++的类提供了面向对象编程的基本功能，允许开发者定义和组织代码，支持封装、继承、多态等特性，帮助提高代码的可重用性和可维护性

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
实例

先touch money.cpp创建一个类
然后编好这个类
在touch cmain2.cpp写程序



#include <iostream>
#include "money.h"
using namespace std;
int main() 
{

     Money myqianbao;
     cin>>qianbao.value;
      cin>>qianbao.style;
      qianbao.pay(10);
      cout<<"还剩"<<myqianbao.value<<endl;
}


写好程序后g++ money.cpp cmain2.cpp -o exm 编译这两个文件
最后./exm执行文件


你提到的代码有几个问题需要修复和改进：
cin 和 cout 语句中使用了错误的变量名：代码中使用了 qianbao，但你创建的对象是 myqianbao。
缺少 money.h 的定义：我们需要定义 Money 类，并提供 value 和 style 的访问方法。
没有为 pay() 方法定义：你调用了 qianbao.pay(10)，但这个方法需要在 Money 类中定义。
让我们先完善 money.h，然后修复主程序。
————————————————————————————————————————————————————————————————————————————————————————
类的使用，
类创建对象：类名+空格+对象名
            类名+空格+*+对象名=new+空格+类名();        指针型，用的更多
             
         Money mymoney;
         Money *ourmoney=new money();
  对象的使用方法，1直接创建对象（普通对象）用.导出
                  2指针型对象用->导出public属性的对象


c++基础之变量的作用范围

局部变量：函数里面创建的变量。只能在函数里面使用，临时的了变量
全局变量：在函数外面定义，整个工程都能使用


构造函数是对象的主体和入口，创建对象一定需要构造函数

构造函数和类是同名的，可以有参数，不能写函数类型，因为构造函数会提供一个对象的内存返回值

构造函数只在指针型对象创建时显示的调用，类似main函数，是创建对象的主体，也是对象开始的入口


练习4：创建一个类，用于描述支付行为，成员包括构造函数，double money，void shopping（double yuan），显示每次购物后剩余多少钱，要求用指针型对象实现
 


—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————day04___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
c++基础算法之·排序算法
C++中有多种常见的排序算法，下面是一些常用的排序算法及其实现。
冒泡排序                    第一层用于遍历整个数组双循环，然后进入第二层循环，进行逐次判断，，，，实现方法，两层for循环
冒泡排序是一个双重循环的排序算法， 通过逐次比较相邻的两个元素来把新增的元素“冒泡”放到列表的最后，直到整个队列。
下面是承载双重循环的


冒泡排序（Bubble Sort）是一种简单的排序算法，它通过不断比较和交换顺序的元素来使数据变得稀疏。最大或最小的元素逐渐移动到吞吐量的末尾，就像气泡上升一样。

冒泡排序的原理
基本思想：
从总线的枢纽开始，依次比较相邻的两个元素。
如果前一个元素比后一个元素大，则交换这两个元素。
经过比较之后，最大的元素会被“冒泡”到内存的最后。
对剩余的元素重复上述过程，直至集群。
形象理解：

就像在水里有很多气泡，气泡会向上升，比较重的气泡会浮到上面，而较小的气泡慢慢到达底部。
每一个激动中，最大的“气泡”（元素）被放置在正确的位置。




#include <iostream>
void bubbleSort(int arr[], int n) {          // 外层循环控制遍历次数
    
    for (int i = 0; i < n-1; i++) {          // 内层循环进行相邻元素的比较与交换
        
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {           // 交换 arr[j] 和 arr[j+1]
                
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            } }}}
int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    bubbleSort(arr, n);
    
    std::cout << "排序后的数组: ";
    for (int i = 0; i < n; i++)
        std::cout << arr[i] << " ";
    std::cout << std::endl;

    return 0;
}


解释
外层循环 for (int i = 0; i < n-1; i++)：控制每一轮冒泡的次数，经过n-1轮询后，吞吐量就完全排序了。
内层循环 for (int j = 0; j < n-i-1; j++)：在每一轮冒泡中，比较并交换相互之间的元素。每一轮过后，最大的元素会被冒泡到队列的队列。
例子
给定量{64, 34, 25, 12, 22, 11, 90}、冒泡排序的执行流程如下：

第1轮：{64, 34, 25, 12, 22, 11, 90}→{34, 25, 12, 22, 11, 64, 90}
第2轮：{34, 25, 12, 22, 11, 64, 90}→{25, 12, 22, 11, 34, 64, 90}
第3轮：{25, 12, 22, 11, 34, 64, 90}→{12, 22, 11, 25, 34, 64, 90}
...

void bubbleSort(int arr[], int n) {该代码的作用
void bubbleSort(int arr[], int n)那arr進行冒泡排序，升序排列。
函数名： `bubbleSort，表示
参数：
int arr[]: 一个
int n: 數
返回类型： void，显示这个函数


冒泡排序（Bubble Sort）函数的基本结构非常简单，主要包括以下几个步骤：

外层循环：控制遍历的次数。
内层循环：用于比较和交换相邻的元素。
条件判断：如果前一个元素大于后一个元素，则交换它们的位置。
以下是一个C++中冒泡排序函数的基本结构示例：

#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {           // 外层循环
        for (int j = 0; j < n-i-1; j++) {     // 内层循环
            if (arr[j] > arr[j+1]) {          // 条件判断
                // 交换arr[j]和arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    cout << "排序后的数组: \n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}

代码解释
函数定义：bubbleSort函数接受一个整数数组和数组的大小作为参数。
双重循环：外层循环控制遍历的次数，内层循环用于比较和交换相邻的元素。
条件判断：如果前一个元素大于后一个元素，则交换它们的位置。
主函数：在main函数中，定义一个数组并调用bubbleSort函数进行排序，最后输出排序后的数组。


int a = 5;
int b = 10;
int temp;

temp = a;  // 将 a 的值暂时存放在 temp 中
a = b;     // 将 b 的值赋给 a
b = temp;  // 将 temp 中原 a 的值赋给 b

           // 交换完成后，a 和 b 的值被互换
cout << "a: " << a << ", b: " << b << endl;  // 输出 a: 10, b: 



字符串
使用字符串时开头需要using namespace std；
而且字符串只有加法运算，没有减法和乘除法
字符串有两个头文件string和string.h

带<>的都用using namespace std;因为c++只有一个标准库




void在函数中的作用

1. 显示函数不返回值
在 C++ 中，函数通常返回某种类型的数据，例如int、float等不需要返回值，void作为返回

2. 用于表示空参数类型
在函数定义或声明中，如果函数未接收任何参数，void明确()即可。

特点
函数执行结束时，返回一个值给调用者
返回的值可以被赋值给变量，或者用于其他操作。
______________返回类型必须在函数声明时明确指定（如int、`双double等
函数体内的return語

在C++编程中，需要返回值的通常情况是当函数执行完某个操作后，需要将结果、或相关信息传递回调用者



注意main函数尽量精简




任务：做一个小型的学生管理系统，10个成员，每个成员包含学生姓名，id，成绩这三个基础数据
      满足以下功能，基础性对话界面，有四个选项，分别是，添加学员，删除学员，查看学员信息，退出
      添加学员就是进入二级对话框输入学员信息，删除查看学员等也是进入二级对话框，输入学生id



首先提示用户：“注册”或者“已有账号登录”点击注册就会弹出一个框



探索开源项目：使用GitHub的搜索功能，查找你感兴趣的开源项目。你可以通过项目的README文件了解项目的背景和使用方法。
关注热门项目：关注一些热门的开源项目，观察它们的代码结构和开发流程。例如，HelloGitHub是一个专门为初学者推荐有趣项目的仓库1。

















