
 Visual Studio Code (VSCode) 的终端中，清屏的快捷键是：

Windows 和 Linux: Ctrl + L
macOS: Cmd + K
这会清除终端中的输出，但不会影响之前的命令历史记录，你仍然可以通过上下箭头查看之前执行的命令。

其他清屏方法：
你也可以直接在终端中输入 clear 命令（适用于大多数 Unix 和 Linux 系统）或 cls（适用于 Windows）来清屏。

————————————————————————————————————————————————————————————————————————————————————————————————
#include <iostream>
#include <string>
using namespace std;
{
    cout<<"diyibu"<<endl; 
}

结果
in function `_start':
(.text+0x24): undefined reference to `main'
collect2: error: ld returned 1 exit status


你的代码有语法错误。cout 语句不能直接放在全局作用域中，它必须在函数或代码块（例如main() {}）内部执行。

为什么他不能放在全局全局作用域中，什么是全局全局作用域

在 C++ 中，作用域（Scope）决定了变量或语句可以被访问的范围。作用域分为局部作用域和全局作用域。

1. 全局作用域：
全局作用域是指不属于任何函数、类或其他代码块的作用域。
在全局作用域中声明的变量、函数或常量，可以被整个程序中的任何地方访问。
但在全局作用域中，只能声明和定义变量、常量、函数，不能包含像 cout 这样的语句，因为全局作用域不能直接执行代码。
2. 局部作用域：
局部作用域是指在函数、类、循环或其他代码块中的作用域。
在局部作用域中声明的变量或语句，只能在那个特定代码块内部访问和执行。
代码（如 cout 语句）必须放在局部作用域中才能被执行。
为什么不能在全局作用域中执行语句？
在 C++ 中，所有执行代码（如 cout 语句）必须放在函数或代码块中，因为编译器在全局作用域中只负责处理声明，不负责执行代码。换句话说，全局作用域只用于定义变量、函数或类，而不用于实际执行操作。

全局作用域 vs 局部作用域 示例：

#include <iostream>
using namespace std;

// 全局作用域
int globalVar = 10;  // 这是全局变量

// 函数定义也是全局作用域的一部分
void display() {
    cout << "这是全局函数，globalVar = " << globalVar << endl;
}

int main() {
    // 局部作用域
    int localVar = 20;  // 这是局部变量
    cout << "这是局部变量，localVar = " << localVar << endl;

    // 调用全局函数
    display();

    return 0;
}

<<有什么作用
————————————————————————————————————————————————————————————
在C++中，<< 操作符被称为插入运算符（insertion operator），用于将数据插入到输出流中。具体来说，在cout语句中，<< 操作符将右侧的值插入到左侧的输出流中。以下是每个部分的作用：

cout << "整数: " << a << endl;

详细解释
cout：标准输出流对象，用于输出数据到控制台。
<<：插入运算符，将右侧的值插入到左侧的输出流中。
"整数: "：字符串常量，将其插入到输出流中，输出到控制台。
a：变量，将其值插入到输出流中，输出到控制台。
endl：操纵算子，用于插入一个换行符并刷新输出缓冲区。

示例
int a = 10;
cout << "整数: " << a << endl;


类似地，其他语句的作用也是将不同类型的数据插入到输出流中并输出到控制台。例如：
cout << "浮点数: " << b << endl;
cout << "字符: " << c << endl;
cout << "字符串: " << str << endl;
每个<< 操作符将右侧的数据插入到输出流中，形成一个连续的输出流，最终输出到控制台。


————————————————————————————————————————————————————————————
vscode中快捷键
ctrl+,   打开设置                 打开命令面板（Windows: Ctrl + Shift + P，Mac: Cmd + Shift + P）。
vscode 调整终端字体大小的设置在哪里
打开 VSCode。
点击左下角的齿轮图标（设置），然后选择“设置”。
在设置界面中，搜索“terminal font size”。
在“终端 > Integrated: Font Size”选项中，输入你想要的字体大小
Terminal Font Size 的中文意思是“终端字体大小”，用于设置终端窗口中显示文本的字体大小。
Zoom Level 的中文意思是“缩放级别”，用于调整整个 VSCode 界面的缩放比例
Integrated: Line Height 的中文意思是“集成终端行高”


DEMO是"demonstration"的缩写。DEMO的中文含意为“示范”

————————————————————————————————————————————————————————————————————
       这段代码有什么问题
#include <iostream>
using namespace std;

int funct(int a, int b) {
    int c = 1;
    for(int i = 0; i < b; i++) {
        c = c * a;
    }
    return c;
}

int main() {
    int a, b;
    cout << "请输入两个整数 a 和 b: ";
    cin >> a >> b;
    cout << "a^b = " << funct(a, b) << endl;
    return 0;
}

主要问题如下：

for 循环的语法错误：for(int i=0,i <b,i++) 应该改为 for(int i = 0; i < b; i++)。
大括号的匹配错误：for 循环和 if 语句的大括号没有正确匹配。
函数名不一致：在 main 函数中调用的是 func，而定义的是 funct。需要统一为 funct。

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————-——


bash: ../: Is a directory是什么错误

这个错误信息 “bash: …/: Is a directory” 表示你试图执行一个目录而不是一个可执行文件12。在命令行中，../ 通常用来表示上一级目录。如果你在命令行中输入了 ../ 并尝试执行它，系统会提示这是一个目录，而不是一个可执行文件。

要解决这个问题，你需要确保输入的命令是一个可执行文件的路径，而不是一个目录的路径。例如，如果你想要进入上一级目录，可以使用 cd ../ 命令，而不是直接执行 ../


——————————————————————————————————————————————————————————————————————————————————————


在 C++ 中，数组、指针和字符串是三个非常重要的概念。它们之间有很多联系和区别。以下是一些关键点：

数组
定义：数组是一组相同类型的数据的集合。它们在内存中是连续存储的。
声明：int arr[5]; 这声明了一个包含 5 个整数的数组。
访问：通过索引访问数组元素，例如 arr[0] 访问第一个元素。


指针
定义：指针是一个变量，它存储另一个变量的内存地址。
声明：int *ptr; 这声明了一个指向整数的指针。
使用：通过 & 获取变量的地址，例如 ptr = &var;，通过 * 访问指针指向的值，例如 *ptr。


字符串
C 风格字符串：在 C++ 中，C 风格的字符串是一个字符数组，以 \0 结尾。
char str[] = "Hello";

字符串指针：可以使用指针指向字符串。
const char *str = "Hello";

C++ 字符串类：C++ 提供了 std::string 类来处理字符串，更加方便和安全。
std::string str = "Hello";

结合使用
数组和指针：数组名实际上是一个指向数组第一个元素的指针。
int arr[5] = {1, 2, 3, 4, 5};
int *ptr = arr; // 等价于 int *ptr = &arr[0];

字符串和指针：字符串可以通过字符指针来处理。
const char *str = "Hello";
while (*str != '\0') {
    std::cout << *str;
    str++;
}

示例代码
以下是一个简单的示例，展示了数组、指针和字符串的基本用法：

#include <iostream>
#include <string>

int main() {
    // 数组
    int arr[5] = {1, 2, 3, 4, 5};
    for (int i = 0; i < 5; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    // 指针
    int var = 10;
    int *ptr = &var;
    std::cout << "Value of var: " << var << std::endl;
    std::cout << "Address of var: " << ptr << std::endl;
    std::cout << "Value at address stored in ptr: " << *ptr << std::endl;

    // 字符串
    const char *cstr = "Hello, C++";
    std::cout << "C-style string: " << cstr << std::endl;

    std::string cppstr = "Hello, C++";
    std::cout << "C++ string: " << cppstr << std::endl;

    return 0;
}

——————————————————————————————————————————————————————————————————arr是什么

在 C++ 中，arr 通常用来表示数组。存储相同类型元素的集合，并且这些元素在内存中是连续存储的。以下是一些关于数组的关键点：

数组的声明和初始化
声明：type arrayName[arraySize];
int arr[5]; // 声明一个包含 5 个整数的一维数组

初始化：
int arr[5] = {1, 2, 3, 4, 5}; // 初始化数组
int arr[] = {1, 2, 3, 4, 5};  // 自动推断数组大小

访问数组元素
通过索引访问：
int firstElement = arr[0]; // 访问第一个元素
arr[1] = 10; // 修改第二个元素的值

数组和指针
数组名作为指针：数组名 arr 实际上是一个指向数组第一个元素的指针。          int *ptr = arr; // 等价于 int *ptr = &arr[0];

示例代码
以下是一个简单的示例，展示了如何使用数组：

#include <iostream>

int main() {
    // 声明和初始化数组
    int arr[5] = {1, 2, 3, 4, 5};

    // 访问和修改数组元素
    for (int i = 0; i < 5; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    // 使用指针访问数组元素
    int *ptr = arr;
    for (int i = 0; i < 5; ++i) {
        std::cout << *(ptr + i) << " ";
    }
    std::cout << std::endl;

    return 0;
}


————————————————————————————————————————————————————————
给定一个10个数据的数组，找到与输入值相同的数据序号

你可以使用以下 C++ 代码来找到一个包含 10 个元素的数组中与输入值相同的元素的序号：

#include <iostream>

int main() {
    int arr[10] = {3, 5, 7, 9, 11, 13, 15, 17, 19, 21}; // 示例数组
    int input;
    std::cout << "请输入一个值: ";
    std::cin >> input;

    bool found = false;
    for (int i = 0; i < 10; ++i) {
        if (arr[i] == input) {
            std::cout << "找到值 " << input << " 在数组中的序号是: " << i << std::endl;
            found = true;
            break; // 找到后退出循环
        }
    }

    if (!found) {
        std::cout << "数组中没有找到值 " << input << std::endl;
    }

    return 0;
}
————————————————————————————————————————————————————————————-——-
代码说明
         数组声明和初始化：int arr[10] = {3, 5, 7, 9, 11, 13, 15, 17, 19, 21}; 声明并初始化一个包含 10 个整数的数组。
         输入值：使用 std::cin 获取用户输入的值。————————
         遍历数组：使用 for 循环遍历数组中的每个元素。
         比较和输出：如果找到与输入值相同的元素，输出其序号并退出循环。如果遍历完数组后没有找到，输出提示信息。
         你可以将这个代码复制到你的 C++ 开发环境中运行，并根据需要修改数组的内容和大小。

————————————————————————————————————————————————————————————————————————————————————————————int sum[10]

Copilot
正在为你生成答案…

int sum[10]; 声明了一个包含 10 个整数的数组，名为 sum。这个数组可以用来存储 10 个整数。以下是一些关于如何使用这个数组的示例：

声明和初始化
int sum[10]; // 声明一个包含 10 个整数的数组

你可以在声明时初始化数组：

int sum[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; // 初始化数组

访问和修改数组元素
你可以通过索引访问和修改数组中的元素：

sum[0] = 10; // 修改第一个元素的值为 10
int firstElement = sum[0]; // 访问第一个元素

遍历数组                           你可以使用循环遍历数组中的所有元素：
for (int i = 0; i < 10; ++i) {
    std::cout << sum[i] << " ";
}
std::cout << std::endl;

示例代码
以下是一个完整的示例，展示了如何声明、初始化、访问和遍历数组：

#include <iostream>

int main() {
    // 声明和初始化数组
    int sum[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    // 访问和修改数组元素
    sum[0] = 10; // 修改第一个元素的值
    std::cout << "第一个元素的值: " << sum[0] << std::endl;

    // 遍历数组
    std::cout << "数组元素: ";
    for (int i = 0; i < 10; ++i) {
        std::cout << sum[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}

这个示例展示了如何使用数组存储和操作数据。



————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

std::cout << "请输入一个值: ";
    std::cin >> input;

示例代码
#include <iostream>

int main() {
    int input;                                                  ________________    
                                                              // 声明一个整数变量用于存储用户输入的值
                                     
    
    std::cout << "请输入一个值: ";                            // 提示用户输入一个值
    std::cin >> input;                                       // 获取用户输入的值并存储在变量 input 中

    
    std::cout << "你输入的值是: " << input << std::endl;        // 输出用户输入的值

    return 0;
}


——————————————————————————————————————————————————————————————————————————————————————————

std:: 是 C++ 标准库命名空间的前缀。C++ 标准库中的所有函数、对象和类型都在 std 命名空间中定义。使用 std:: 前缀可以访问这些标准库中的元素。


以下是一些常见的 std:: 用法示例：
#include <iostream>                //标准输入输出流：

int main() {
    std::cout << "Hello, World!" << std::endl; // 输出到控制台
    int input;
    std::cout << "请输入一个值: ";
    std::cin >> input; // 从控制台读取输入
    std::cout << "你输入的值是: " << input << std::endl;
    return 0;
}


使用命名空间
为了避免每次都写 std:: 前缀，可以使用 using 声明：

#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World!" << endl; // 不需要 std:: 前缀
    int intput；
     cout<<"请输入一个值:";
     cin>>input;
     cout<<"你输入的值是："<<input<<endl;
    return 0;
}

不过，建议在大型项目中谨慎使用 using namespace std;，以避免命名冲突

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

在C++中，宏（macro）是预处理器的一种功能，允许开发者定义简短的代码片段，可以在程序编译前进行替换。宏通过预处理指令 #define 定义，在编译时由预处理器负责展开，不进行类型检查，因此效率高，但也存在一些潜在的风险。

宏的两种主要类型
对象宏：将某个名称替换为特定的值或代码片段。
函数宏：带参数的宏，类似于函数，但是在预处理阶段进行文本替换。
宏的定义和使用
对象宏
对象宏是简单的符号替换。定义后，每次在代码中遇到宏名称时，预处理器会将其替换为定义的内容。

#define PI 3.14159

#include <iostream>
using namespace std;

int main() {
    cout << "The value of PI is " << PI << endl;  // PI 会被替换为 3.14159
    return 0;
}
函数宏
函数宏带有参数，定义类似于函数调用，但并没有参数类型检查。在使用时，预处理器会直接将宏展开为代码。


#define SQUARE(x) ((x) * (x))  // 计算平方的宏

#include <iostream>
using namespace std;

int main() {
    int num = 5;
    cout << "The square of " << num << " is " << SQUARE(num) << endl;  // 展开为 ((5) * (5))
    return 0;
}
宏的特点和使用场景
宏是文本替换：在预处理阶段，宏只是简单的文本替换，不涉及类型检查或语法验证，因此它比函数更快，但也更容易引发问题。

无需开销：由于宏在预处理阶段展开，不像函数那样需要在运行时调用，因此不存在函数调用的开销。

灵活性：宏可以定义常量、表达式、甚至是代码片段。比如定义调试代码的宏可以在开发阶段启用，而在发布时禁用：


#define DEBUG

#ifdef DEBUG
#define LOG(msg) cout << "DEBUG: " << msg << endl
#else
#define LOG(msg)
#endif

int main() {
    LOG("This is a debug message.");
    return 0;
}

_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

嵌入式开发是什么，有什么要求

嵌入式开发是指为嵌入式系统编写和设计软件的一种开发活动。嵌入式系统是专门为特定功能或应用设计的计算系统，通常集成在更大的系统中，具有有限的硬件资源，如微控制器、传感器、存储器等。嵌入式系统广泛应用于汽车电子、智能家电、医疗设备、工业控制、物联网设备等领域。

嵌入式系统的特点
专用性强：嵌入式系统通常用于执行特定的任务，专门为特定应用设计。
资源受限：由于硬件限制，嵌入式系统的处理器、内存、存储等资源通常非常有限。
实时性：许多嵌入式系统有严格的时间要求，需要实时响应外部事件。
低功耗：嵌入式系统通常在电池供电的环境中使用，因此对功耗的要求较高。
长期稳定性：嵌入式系统通常要求高稳定性，能在恶劣环境下长期可靠运行。
嵌入式开发的基本流程
需求分析：明确要开发的嵌入式设备的功能需求，如控制策略、输入输出接口、功耗要求等。
硬件选型：根据需求选择合适的硬件平台，如微控制器（MCU）、微处理器（MPU）、传感器等。
软件设计：
编写驱动程序与底层接口，控制硬件外设。
编写应用逻辑，实现所需功能。
实现实时操作系统（RTOS）或裸机编程，确保系统响应时间。
调试与测试：通过调试工具、仿真器等，对系统进行调试和测试，确保功能正常和性能达标。
优化：针对功耗、内存占用、执行效率等进行优化，确保系统在资源受限的环境下高效运行。
部署与维护：系统交付后，还可能需要进行固件升级和维护。
嵌入式开发的常用工具与技术
编程语言：

C语言：嵌入式开发的主要语言，适合直接操作硬件并且高效。
C++：有时用于需要面向对象设计或更高层次的软件抽象。
汇编语言：在某些对性能要求极高或硬件操作极为精确的场景下，汇编语言会被用到。
硬件平台：

微控制器（MCU）：如ARM Cortex-M、AVR、PIC、ESP等。
微处理器（MPU）：如ARM Cortex-A系列，适合需要更强处理能力的嵌入式系统。
FPGA/ASIC：用于特殊的嵌入式系统，比如高性能计算、专用电路。
开发工具：

集成开发环境（IDE）：如Keil、IAR、STM32CubeIDE、PlatformIO等，提供代码编写、调试和仿真功能。
编译器：如GCC、ARM Compiler，用于将高层代码编译为机器码。
调试器：如JTAG、SWD，用于调试嵌入式设备。
仿真器：如QEMU，用于在开发阶段模拟硬件环境，便于测试代码。
实时操作系统（RTOS）：

嵌入式开发中常用的实时操作系统有FreeRTOS、RT-Thread、Zephyr等，用于处理任务调度、资源管理等。
驱动与中断：

嵌入式开发中，常常需要编写硬件驱动程序，与外围设备如GPIO、串口、SPI、I2C等进行交互。
中断处理是嵌入式系统中的关键机制，用于快速响应硬件事件。
嵌入式开发的要求
硬件基础知识：

理解嵌入式系统的硬件架构，如处理器、存储器、I/O接口、传感器、通信协议等。
掌握如何读写寄存器、操作外设、理解硬件手册和数据手册。
编程能力：

熟练使用C语言，并了解如何进行低级编程，如位操作、指针操作等。
能够在资源有限的环境中编写高效、低功耗的代码。
掌握调试技巧，能够使用硬件调试工具进行嵌入式程序的调试。
实时系统设计：

理解实时操作系统（RTOS）的基本概念，如任务调度、优先级、中断管理等。
了解如何在时间敏感的系统中实现任务切换、事件响应等功能。
问题调试与解决能力：

嵌入式系统中的问题可能来自多个层面，如硬件、驱动程序、实时操作系统等，开发者需要具备较强的分析和调试能力。
优化能力：

资源限制是嵌入式系统的一个常见问题，开发者需要具备内存管理、性能优化、功耗管理的能力。
嵌入式通信协议：

理解常用的嵌入式通信协议，如UART、I2C、SPI、CAN、Ethernet、ZigBee、Bluetooth等。
掌握如何处理这些协议的通信，以及如何进行调试。
嵌入式开发的应用领域
消费电子：智能手表、智能手机、家电设备等。
工业控制：自动化生产设备、PLC控制器等。
汽车电子：发动机控制单元（ECU）、车载娱乐系统、自动驾驶系统等。
物联网：智能家居、传感器网络、智能城市等。
医疗设备：生命体征监测设备、医疗仪器等。
总结
嵌入式开发结合了软件编程与硬件设计的知识，要求开发者在资源受限的环境中编写高效、稳定的软件。嵌入式开发不仅要求良好的编程能力，还需要了解底层硬件架构、实时操作系统、通信协议等，才能在特定领域设计出高性能的嵌入式系统。——
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


解释一下这几行代码#ifndef MONEY_H
#define MONEY_H

#include <iostream>
#include <string>
using namespace std;

这几行代码使用了头文件保护符、预处理器指令和标准库的导入，常用于 C++ 项目。下面是对每行的详细解释：

1. #ifndef MONEY_H
这行代码的意思是 "如果没有定义 MONEY_H"。#ifndef 是 "if not defined" 的缩写，它是一个预处理器指令，用于防止重复包含同一个头文件。

具体作用是防止头文件被重复包含。如果在其他文件中已经包含了这个头文件，再次包含会导致重复定义，可能引发编译错误。为了避免这种情况，使用条件编译检查是否已经定义过 MONEY_H。

2. #define MONEY_H
这行代码是对宏 MONEY_H 进行定义。#define 是一个预处理器指令，用于定义一个宏。在这个上下文中，它定义了 MONEY_H 宏。如果头文件第一次被包含，MONEY_H 还没有定义，执行 #define MONEY_H，表示这个头文件已经被处理过了。

在后续的包含过程中，由于 MONEY_H 已经被定义，前面的 #ifndef MONEY_H 会失败，从而避免再次执行头文件的内容。

3. #include <iostream>
这一行是包含 C++ 的标准输入输出库 iostream。这个库提供了标准输入输出流，例如 cin、cout、cerr，用于处理控制台输入输出操作。

4. #include <string>
这一行是包含 C++ 的字符串库 string。string 是 C++ 中用于处理字符串的类，提供了丰富的字符串操作功能，比如拼接、查找、比较等。

5. using namespace std;
这一行指令将命名空间 std（标准库的命名空间）引入当前文件的作用域中。这样做之后，可以直接使用 std 命名空间中的元素，而不需要每次加上前缀 std::。

例如：

std::cout 变为 cout
std::string 变为 string
虽然这样可以简化代码，但在大型项目中，最好限制使用 using namespace std;，避免命名冲突。

总结：
#ifndef 和 #define 是用来防止头文件重复包含的预处理指令。
#include <iostream> 和 #include <string> 导入了标准库中的输入输出和字符串处理功能。
using namespace std; 是为了简化对标准库中元素的访问。





————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
如果在 VSCode 的终端中执行命令时遇到 "Permission denied" 错误，通常是因为当前用户没有权限执行某些操作或访问某些文件。以下是一些常见的解决方法：

1. 使用 sudo 提升权限
如果你在 Linux 或 macOS 系统上执行命令时权限不足，可以使用 sudo 提升权限。例如：

bash
复制代码
sudo <your-command>
系统会要求你输入管理员密码（一般是当前用户的密码）。例如，如果你正在尝试访问或修改受保护的文件或目录，可以执行：

bash
复制代码
sudo chmod 755 <filename>



——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
在 Visual Studio Code (或任何文本编辑器) 中保存头文件的步骤如下：

1. 创建一个新的文件
在 VSCode 中，点击左侧活动栏的 文件图标，然后点击上方的 新建文件 按钮，或者按快捷键 Ctrl + N（Windows/Linux）或 Cmd + N（macOS）。
你也可以直接在终端中进入你想保存文件的目录，然后运行命令 touch money.h 创建空文件。
2. 将代码复制到新文件中
将你之前创建的 money.h 代码复制到新建的文件中。

3. 保存文件
按 Ctrl + S (Windows/Linux) 或 Cmd + S (macOS)，打开保存对话框。
在保存对话框中，选择你想要保存文件的位置（例如项目的目录），然后在 文件名 部分输入文件名 money.h。
确保文件扩展名是 .h，这是 C++ 头文件的标准扩展名。

4. 确认保存位置
通常，头文件会保存在与其他源文件（如 main.cpp）相同的目录中，或者根据项目组织规则保存在特定的 include 目录中。确保头文件路径与你的项目结构一致。

5. 在主程序中包含头文件
在你项目的其他源文件（例如 main.cpp）中，你可以通过以下方式包含这个头文件：

复制代码
#include "money.h"


————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————错误案例
你的代码存在几个问题，主要是语法结构的问题。以下是问题的详细说明以及如何修正它们：

1. class 不能定义在 main 函数中
在 C++ 中，类的定义必须在函数外部进行。你将 class Money 定义在 main() 函数内部，这在 C++ 中是不允许的。类定义应该在全局作用域或者命名空间中，而不是局部函数内。

2. 缺少分号
类定义结束后，应该在 } 后加上分号 ;，这是 C++ 的语法要求。

3. 不需要在 main() 中重新定义 Money 类
Money 类的定义应在 main() 函数外，而在 main() 函数内实例化（创建）该类的对象。

4. 缺少头文件保护机制
确保在 money.h 文件中使用头文件保护符（如 #ifndef、#define 等），以防止重复包含该头文件。
——————————————————————————————————————————————————————————————————————————————————————————————————————




————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
构造函数

在 C++ 中，构造函数是用于初始化类对象的特殊函数。当你创建类的对象时，构造函数会自动调用。构造函数的主要作用是为对象的成员变量赋初始值。

构造函数的特点：
与类同名：构造函数的名称与类的名称相同。
没有返回类型：构造函数没有返回类型，甚至没有 void。
自动调用：当类的对象被创建时，构造函数会自动执行。
构造函数的类型：
默认构造函数：没有参数的构造函数，或者所有参数都有默认值的构造函数。
有参构造函数：带有参数的构造函数，用于传递初始值给成员变量。
拷贝构造函数：用于将一个对象的值拷贝到另一个对象中（不是必须的，除非有特殊要求）。
示例代码：
我们用 Money 类来演示构造函数的使用：

1. 默认构造函数：

#include <iostream>
#include <string>
using namespace std;

class Money {
private:
    double value;   // 金额
    string style;   // 货币类型

public:
    // 默认构造函数
    Money() {
        value = 0.0;
        style = "USD";
        cout << "调用了默认构造函数。" << endl;
    }

    // 显示当前金额和货币类型
    void display() const {
        cout << "金额: " << value << ", 货币类型: " << style << endl;
    }
};

int main() {
    Money myMoney;  // 创建对象时，默认构造函数会被调用
    myMoney.display();

    return 0;
}
输出：
makefile
复制代码
调用了默认构造函数。
金额: 0, 货币类型: USD
2. 有参构造函数：
cpp
复制代码
#include <iostream>
#include <string>
using namespace std;

class Money {
private:
    double value;   // 金额
    string style;   // 货币类型

public:
    // 有参构造函数
    Money(double v, string s) {
        value = v;
        style = s;
        cout << "调用了有参构造函数。" << endl;
    }

    // 显示当前金额和货币类型
    void display() const {
        cout << "金额: " << value << ", 货币类型: " << style << endl;
    }
};

int main() {
    Money myMoney(100.5, "EUR");  // 创建对象时，传入初始值
    myMoney.display();

    return 0;
}
输出：
makefile
复制代码
调用了有参构造函数。
金额: 100.5, 货币类型: EUR
3. 构造函数初始化列表：
构造函数还可以通过 初始化列表 来初始化成员变量，通常比在构造函数体内赋值更有效率。


#include <iostream>
#include <string>
using namespace std;

class Money {
private:
    double value;   // 金额
    string style;   // 货币类型

public:
    // 构造函数初始化列表
    Money(double v, string s) : value(v), style(s) {
        cout << "调用了初始化列表的构造函数。" << endl;
    }

    // 显示当前金额和货币类型
    void display() const {
        cout << "金额: " << value << ", 货币类型: " << style << endl;
    }
};

int main() {
    Money myMoney(250.0, "GBP");  // 使用初始化列表
    myMoney.display();

    return 0;
}
输出：
makefile
复制代码
调用了初始化列表的构造函数。
金额: 250, 货币类型: GBP
总结：
默认构造函数：用于创建对象时不需要传递初始值。
有参构造函数：允许创建对象时传递初始值。
初始化列表：在效率要求较高时，推荐使用初始化列表来设置成员变量的初值。
构造函数帮助我们在创建对象时自动完成初始化工作，而不必每次手动设置对象的初始状态。








———————————————————————————————————————————————————————————————day04_______________________________________________________________________________________________________________________________


1.冒泡排序 (Bubble Sort)
时间复杂度： O(n²)
冒泡排序，通过重复遍历列表，将相邻的元素进行比较并交换，直到整个列表小区。




进程

复制代码
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // 交换 arr[j] 和 arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}
2.选择排序（Selection Sort）
时间复杂度： O(n²)
选择排序每次没有排序的部分中找到最小的元素，将其排序排序部分的补充。

进程

复制代码
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        int minIndex = i;
        for (int j = i+1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // 交换 arr[i] 和 arr[minIndex]
        int temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
}
3.插入排序（Insertion Sort）
时间复杂度： O(n²)
插入排序将排序部分已排序和排序未部分，将未排序部分的元素依次插入到已排序部分的合适位置。

进程

复制代码
void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        // 将大于 key 的元素向后移
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}



————————————————————————————————————————————————————————————————————————————————————————————


在 C++ 中，int temp 是用来声明一个名为 temp 的整数类型（int）变量，表示它可以存储整数值。它的典型用法是作为临时存储单元，用于在需要交换、处理数据时暂存某个值，防止数据丢失。

1. 变量声明

int temp;
int：变量的数据类型为整数类型（int），可以存储范围内的整数值。
temp：这是变量的名称，可以随代码需要自定义。它通常作为临时变量使用。
当你声明 int temp 时，temp 变量被分配了空间，但还没有被初始化，内容是不确定的，直到你给它赋值。
2. 常见使用场景
int temp 常被用作 临时变量，在涉及值交换、临时存储数据时很常见。以下是一些具体应用：

2.1. 在交换两个变量的值时
当需要交换两个变量的值时，使用 temp 变量可以暂时保存一个值，避免数据丢失。


int a = 5;
int b = 10;
int temp;

temp = a;  // 将 a 的值暂时存放在 temp 中
a = b;     // 将 b 的值赋给 a
b = temp;  // 将 temp 中原 a 的值赋给 b

// 交换完成后，a 和 b 的值被互换
cout << "a: " << a << ", b: " << b << endl;  // 输出 a: 10, b: 5
在这里，temp 保存了 a 的值，确保 a 的原值不丢失，便于交换。

2.2. 在排序算法中
例如，在冒泡排序中，int temp 用来存储两个要交换的相邻元素之一的值。

cpp
复制代码
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];      // 使用 temp 存储 arr[j]
                arr[j] = arr[j + 1];    // 交换 arr[j] 和 arr[j + 1]
                arr[j + 1] = temp;      // 赋值回去
            }
        }
    }
}
在冒泡排序中，temp 暂时保存了一个元素的值，确保可以进行交换操作。

2.3. 在循环或算法中临时存储数据
在循环、递归或复杂算法中，有时需要临时保存某些中间计算结果，这时也可以使用 temp。

3. 初始化和赋值
变量在使用之前需要初始化，即给它赋一个初始值。声明 int temp 后，使用 temp 之前需要给它赋值，否则其值是未定义的。

int temp = 0;  // 声明并初始化 temp 变量
此时，temp 的初始值为 0。

4. 注意事项
未初始化：如果在声明后没有对 temp 赋初始值，其值是不确定的，可能会引发未定义行为。
作用范围：temp 的作用范围（scope）通常局限于它被声明的块（block）中。例如，在函数或循环中声明的 temp，只在该函数或循环内部可用。
总结：
int temp 是一个临时变量，常用于交换数据或作为中间存储器。
它必须在使用前赋值，否则值不确定。
常用于算法中，尤其是涉及到交换、排序等操作时。






C++ cout输出中文
很多朋友使用c++的 cout函数无法打印中文，有一个很简单的方法，就是cout打印std:string

std:string str =  "我是中文";
std:cout << str << std::endl;
1
2
这样就可以愉快的打印中文啦~
————————————————



